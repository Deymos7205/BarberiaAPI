@page "/clientes"

@using BarberiaFront.Models
@using BarberiaFront.Services 
@inject ClienteService ClienteService 
@inject NavigationManager NavigationManager 
@inject IJSRuntime JsRuntime

<h3>Gestión de Clientes</h3>

@if (clientes == null)
{
    <p><em>Cargando clientes...</em></p>
}
else if (!clientes.Any()) 
{
    <p>No hay clientes registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Preferencias</th>
                <th>Fecha de Registro</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>
                    <td>@cliente.Id</td>
                    <td>@cliente.Nombre</td>
                    <td>@cliente.Telefono</td>
                    <td>@cliente.Direccion</td>
                    <td>@cliente.Preferencias</td>
                    <td>@cliente.FechaRegistro.ToShortDateString()</td> 
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => EditCliente(cliente)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCliente(cliente.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>@((nuevoCliente.Id == 0) ? "Agregar Nuevo Cliente" : "Editar Cliente")</h4>
<EditForm Model="@nuevoCliente" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nombre">Nombre:</label>
        <InputText id="nombre" class="form-control" @bind-Value="nuevoCliente.Nombre" />
    </div>
    <div class="form-group">
        <label for="cedula">Cédula:</label>
        <InputText id="cedula" class="form-control" @bind-Value="nuevoCliente.Cedula" /> 
    </div>
    <div class="form-group">
        <label for="telefono">Teléfono:</label>
        <InputText id="telefono" class="form-control" @bind-Value="nuevoCliente.Telefono" />
    </div>
    <div class="form-group">
        <label for="direccion">Dirección:</label>
        <InputText id="direccion" class="form-control" @bind-Value="nuevoCliente.Direccion" />
    </div>
    <div class="form-group">
        <label for="preferencias">Preferencias:</label>
        <InputText id="preferencias" class="form-control" @bind-Value="nuevoCliente.Preferencias" />
    </div>
    <div class="form-group">
        <label for="fechaRegistro">Fecha de Registro:</label>
        
        <InputDate id="fechaRegistro" class="form-control" @bind-Value="nuevoCliente.FechaRegistro" />
    </div>
    <br />
    <button type="submit" class="btn btn-success">
        @((nuevoCliente.Id == 0) ? "Guardar Cliente" : "Actualizar Cliente")
    </button>
    @if (nuevoCliente.Id != 0)
    {
        <button type="button" class="btn btn-secondary ml-2" @onclick="ClearForm">Cancelar Edición</button>
    }
</EditForm>


@code {
    private List<Cliente> clientes;
    private Cliente nuevoCliente = new Cliente(); // Usado para agregar o editar

    // Se ejecuta cuando el componente se inicializa
    protected override async Task OnInitializedAsync()
    {
        await LoadClientes();
    }

    private async Task LoadClientes()
    {
        try
        {
            clientes = await ClienteService.GetClientes();
        }
        catch (HttpRequestException ex)
        {
            // Manejo de errores básico, podrías mostrar un mensaje al usuario
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
            clientes = new List<Cliente>(); // Para que no quede en "Cargando..."
        }
    }

    // Maneja el envío del formulario (agregar o actualizar)
    private async Task HandleValidSubmit()
    {
        try
        {
            if (nuevoCliente.Id == 0)
            {
                // Agregar nuevo cliente
                await ClienteService.AddCliente(nuevoCliente);
            }
            else
            {
                // Actualizar cliente existente
                await ClienteService.UpdateCliente(nuevoCliente.Id, nuevoCliente);
            }

            // Limpiar el formulario y recargar la lista
            ClearForm();
            await LoadClientes();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error al guardar cliente: {ex.Message}");
            // Podrías mostrar un mensaje de error más específico en la UI
        }
    }

    // Prepara el formulario para editar un cliente
    private void EditCliente(Cliente cliente)
    {
        // Crea una nueva instancia para evitar modificar el objeto directamente en la lista
        // antes de que se guarde. Esto es una buena práctica para formularios de edición.
        nuevoCliente = new Cliente
        {
            Id = cliente.Id,
            Nombre = cliente.Nombre,
            Telefono = cliente.Telefono,
            Direccion = cliente.Direccion,
            Preferencias = cliente.Preferencias,
            FechaRegistro = cliente.FechaRegistro
        };
    }

    // Eliminar un cliente
    private async Task DeleteCliente(int id)
    {
        // Pide confirmación al usuario antes de eliminar
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres eliminar este cliente?");
        if (confirmed)
        {
            try
            {
                await ClienteService.DeleteCliente(id);
                await LoadClientes(); // Recargar la lista después de eliminar
                ClearForm(); // Limpiar el formulario si se estaba editando el cliente eliminado
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error al eliminar cliente: {ex.Message}");
            }
        }
    }

    // Limpia el formulario de edición/creación
    private void ClearForm()
    {
        nuevoCliente = new Cliente(); // Crea una nueva instancia limpia
    }
}